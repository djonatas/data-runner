#!/bin/bash

# Data-Runner - Script de InstalaÃ§Ã£o
# Instala o Data-Runner e suas dependÃªncias

set -e  # Sair em caso de erro

echo "ðŸš€ Data-Runner - InstalaÃ§Ã£o"
echo "=========================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# FunÃ§Ã£o para log colorido
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se Python estÃ¡ instalado
check_python() {
    log_info "Verificando Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
        log_success "Python encontrado: $PYTHON_VERSION"
        
        # Verificar se Ã© Python 3.11+
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f2)
        
        if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 11 ]; then
            log_success "VersÃ£o do Python compatÃ­vel (3.11+)"
        else
            log_error "Python 3.11+ Ã© necessÃ¡rio. VersÃ£o atual: $PYTHON_VERSION"
            exit 1
        fi
    else
        log_error "Python 3 nÃ£o encontrado. Instale Python 3.11+ primeiro."
        exit 1
    fi
}

# Verificar se pip estÃ¡ instalado
check_pip() {
    log_info "Verificando pip..."
    
    if command -v pip3 &> /dev/null; then
        log_success "pip encontrado"
    else
        log_error "pip nÃ£o encontrado. Instale pip primeiro."
        exit 1
    fi
}

# Criar ambiente virtual
create_venv() {
    log_info "Criando ambiente virtual..."
    
    if [ -d "venv" ]; then
        log_warning "Ambiente virtual jÃ¡ existe. Removendo..."
        rm -rf venv
    fi
    
    python3 -m venv venv
    log_success "Ambiente virtual criado"
}

# Ativar ambiente virtual e instalar dependÃªncias
install_dependencies() {
    log_info "Ativando ambiente virtual e instalando dependÃªncias..."
    
    # Ativar ambiente virtual
    source venv/bin/activate
    
    # Atualizar pip
    log_info "Atualizando pip..."
    pip install --upgrade pip
    
    # Instalar dependÃªncias bÃ¡sicas
    log_info "Instalando dependÃªncias bÃ¡sicas..."
    pip install -e .
    
    # Perguntar sobre dependÃªncias opcionais
    echo ""
    log_info "DependÃªncias opcionais disponÃ­veis:"
    echo "1) MySQL (mysql-connector-python)"
    echo "2) MSSQL (pymssql)"
    echo "3) Oracle (cx_Oracle)"
    echo "4) Desenvolvimento (pytest, black, isort, etc.)"
    echo "5) Todas as dependÃªncias"
    echo "6) Pular (instalar apenas dependÃªncias bÃ¡sicas)"
    
    read -p "Escolha uma opÃ§Ã£o (1-6): " choice
    
    case $choice in
        1)
            log_info "Instalando dependÃªncias MySQL..."
            pip install -e ".[mysql]"
            ;;
        2)
            log_info "Instalando dependÃªncias MSSQL..."
            pip install -e ".[mssql]"
            ;;
        3)
            log_info "Instalando dependÃªncias Oracle..."
            pip install -e ".[oracle]"
            ;;
        4)
            log_info "Instalando dependÃªncias de desenvolvimento..."
            pip install -e ".[dev]"
            ;;
        5)
            log_info "Instalando todas as dependÃªncias..."
            pip install -e ".[all]"
            ;;
        6)
            log_info "Pulando dependÃªncias opcionais"
            ;;
        *)
            log_warning "OpÃ§Ã£o invÃ¡lida. Instalando apenas dependÃªncias bÃ¡sicas."
            ;;
    esac
    
    log_success "DependÃªncias instaladas"
}

# Configurar arquivos de exemplo
setup_config() {
    log_info "Configurando arquivos de configuraÃ§Ã£o..."
    
    # Copiar arquivos de exemplo se nÃ£o existirem
    if [ ! -f "config/connections.json" ]; then
        cp config/connections.json.example config/connections.json
        log_success "Arquivo config/connections.json criado"
    else
        log_info "Arquivo config/connections.json jÃ¡ existe"
    fi
    
    if [ ! -f "config/jobs.json" ]; then
        cp config/jobs.json.example config/jobs.json
        log_success "Arquivo config/jobs.json criado"
    else
        log_info "Arquivo config/jobs.json jÃ¡ existe"
    fi
    
    log_success "ConfiguraÃ§Ã£o inicial concluÃ­da"
}

# Testar instalaÃ§Ã£o
test_installation() {
    log_info "Testando instalaÃ§Ã£o..."
    
    source venv/bin/activate
    
    # Testar importaÃ§Ã£o
    if python3 -c "from app.runner import JobRunner; print('âœ… JobRunner importado com sucesso')" 2>/dev/null; then
        log_success "ImportaÃ§Ã£o do JobRunner funcionando"
    else
        log_error "Erro na importaÃ§Ã£o do JobRunner"
        exit 1
    fi
    
    # Testar CLI
    if data-runner --help &> /dev/null; then
        log_success "CLI do Data-Runner funcionando"
    else
        log_error "Erro no CLI do Data-Runner"
        exit 1
    fi
    
    log_success "Teste de instalaÃ§Ã£o concluÃ­do"
}

# FunÃ§Ã£o principal
main() {
    echo ""
    log_info "Iniciando instalaÃ§Ã£o do Data-Runner..."
    echo ""
    
    check_python
    check_pip
    create_venv
    install_dependencies
    setup_config
    test_installation
    
    echo ""
    log_success "ðŸŽ‰ Data-Runner instalado com sucesso!"
    echo ""
    echo "ðŸ“‹ PrÃ³ximos passos:"
    echo "1. Ative o ambiente virtual: source venv/bin/activate"
    echo "2. Configure suas conexÃµes: nano config/connections.json"
    echo "3. Configure seus jobs: nano config/jobs.json"
    echo "4. Execute um job: data-runner run --id 'seu_job'"
    echo ""
    echo "ðŸ“– Para mais informaÃ§Ãµes, consulte o README.md"
}

# Executar funÃ§Ã£o principal
main "$@"
